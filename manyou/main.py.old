#!/usr/local/bin/python
# -*- coding: utf-8; -*-

from common import *

import sys

def get_day():
    import calendar
    from datetime import date
    today = date.today()
    cal   = calendar.monthcalendar( today.year, today.month )
    for week in cal:
        if today.day in week:
            index = week.index( today.day )
            break
    if 5 == index or 6 == index:
        return 'holiday'
    else:
        return 'weekday'

def generate_query( day, hour ):
    return ''.join( [ 'SELECT id, mail_address, send_index, direction, `column`, row , day ',
                      'FROM manyoushu_personal_information ',
                      'WHERE is_canceled = FALSE AND ',
                      '( day = \'everyday\' OR day = \'%s\' ) AND ' % day,
                      'hour = %d' % hour
                      ] )

def error_log( traceback ):
    from datetime import datetime
    log = open( 'error_log.txt', 'a' )
    log.write( '\n'.join( [ datetime.now().strftime( '%Y/%m/%d %H:%M:%S' ),
                            traceback,
                            '\n' ] ) )
    log.close()

def error_mail( traceback ):
    """
    create error mail
    """
    from email.MIMEText      import MIMEText
    from email.Header        import Header
    from email.Utils         import formatdate
    msg              = MIMEText( traceback, 'plain', 'iso-2022-jp' )
    msg[ 'Subject' ] = Header( 'manyoushu error' )
    msg[ 'From' ]    = 'manyoushu cron'
    msg[ 'To' ]      = 'tamakoshihiroki@gmail.com'
    msg[ 'Date' ]    = formatdate( localtime = 9 )
    msg[ 'Content-Type' ] = ''.join(
        [ 'text/plain; charset="', 'iso-2022-jp', '"', ] )
    return msg

def log_msg( msg ):
    log = open( 'log.txt', 'a' )
    log.write( '\n'.join( [ datetime.now().strftime( '%Y/%m/%d %H:%M:%S' ),
                            msg,
                            '\n' ] ) )
    log.close()

if '__main__' == __name__:
    log_msg( 'start' )
    database = open_db_connection()
    if not database:
        import traceback
        stacktrace = 'cannot open database'
        error_log( stacktrace )
        message    = error_mail( stacktrace )
        send_mail( message, 'tamakoshihiroki@gmail.com' )
        sys.exit( 0 )
    cursor   = database.cursor()
    weekday  = get_day()
    query    = generate_query( weekday, int( sys.argv[ 1 ] ) )
    cursor.execute( query )
    users    = cursor.fetchall()
    if not users:
        sys.exit( 0 )
    cursor.close()
    uta_indices = [ user[ 'send_index' ] for user in users ]
    uta         = get_uta( uta_indices, database )
    smtpserver  = get_smtpserver()
    if not smtpserver:
        import traceback
        stacktrace = 'cannot open smtpserver'
        error_log( stacktrace )
        message    = error_mail( stacktrace )
        send_mail( message, 'tamakoshihiroki@gmail.com' )
        sys.exit( 0 )
    log_msg( '\t'.join( [ user[ 'mail_address' ] for user in users ] ) )
    for user in users:
        try:
            if 'everyday' == user[ 'day' ] or weekday == user[ 'day' ]:
                mail = get_mail( user[ 'direction' ], uta[ user[ 'send_index' ] ],
                                 user[ 'mail_address' ],
                                 user[ 'column' ], user[ 'row' ] )
                smtpserver.sendmail( 'tmkc.igo@gmail.com',
                                     [ user[ 'mail_address' ] ],
                                     mail.as_string() )
                increment_send_index( database, user[ 'mail_address' ] )
                log_msg( user[ 'mail_address' ] + ' sent' )
        except:
            import traceback
            stacktrace = traceback.format_exc()
            error_log( stacktrace )
            message    = error_mail( stacktrace )
            send_mail( message, 'tamakoshihiroki@gmail.com' )
    database.close()
